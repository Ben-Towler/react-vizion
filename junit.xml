<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="21" failures="1" time="3.153">
  <testsuite name="createVizionManager" errors="0" failures="1" skipped="20" timestamp="2020-04-20T13:51:46" time="2.227" tests="21">
    <testcase classname="createVizionManager initializes the manager with an empty state" name="createVizionManager initializes the manager with an empty state" time="0.001">
      <skipped/>
    </testcase>
    <testcase classname="client hydratation hydrates the `searchClient` for a single index results" name="client hydratation hydrates the `searchClient` for a single index results" time="0">
      <skipped/>
    </testcase>
    <testcase classname="client hydratation hydrates the `searchClient` for a multi index results" name="client hydratation hydrates the `searchClient` for a multi index results" time="0">
      <skipped/>
    </testcase>
    <testcase classname="client hydratation does not hydrate the `searchClient` without results" name="client hydratation does not hydrate the `searchClient` without results" time="0">
      <skipped/>
    </testcase>
    <testcase classname="client hydratation does not hydrate the `searchClient` if it&apos;s not an Clinia client" name="client hydratation does not hydrate the `searchClient` if it&apos;s not an Clinia client" time="0">
      <skipped/>
    </testcase>
    <testcase classname="client hydratation does not hydrate the `searchClient` without cache enabled" name="client hydratation does not hydrate the `searchClient` without cache enabled" time="0">
      <skipped/>
    </testcase>
    <testcase classname="results hydratation initializes the manager with a single index hydrated results" name="results hydratation initializes the manager with a single index hydrated results" time="0">
      <skipped/>
    </testcase>
    <testcase classname="results hydratation initializes the manager with a multi index hydrated results" name="results hydratation initializes the manager with a multi index hydrated results" time="0">
      <skipped/>
    </testcase>
    <testcase classname="widget manager triggers a search when a widget is added" name="widget manager triggers a search when a widget is added" time="0">
      <skipped/>
    </testcase>
    <testcase classname="transitionState executes widgets hook" name="transitionState executes widgets hook" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getWidgetsIds returns the list of ids of all registered widgets" name="getWidgetsIds returns the list of ids of all registered widgets" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getSearchParameters expects a widget top level to be shared between main and derived parameters" name="getSearchParameters expects a widget top level to be shared between main and derived parameters" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getSearchParameters expects a widget with the same id than the indexName to be a main parameters" name="getSearchParameters expects a widget with the same id than the indexName to be a main parameters" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getSearchParameters expects a widget with a different id than the indexName to be a derived parameters" name="getSearchParameters expects a widget with a different id than the indexName to be a derived parameters" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getSearchParameters expects a widget within a mutli index context with the same id than the indexName to be a main parameters" name="getSearchParameters expects a widget within a mutli index context with the same id than the indexName to be a main parameters" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getSearchParameters expects a widget within a mutli index context with a different id than the indexName to be a derived parameters" name="getSearchParameters expects a widget within a mutli index context with a different id than the indexName to be a derived parameters" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getSearchParameters expects widgets main parameters and derived parameters to be correctly calculated within a multi index context" name="getSearchParameters expects widgets main parameters and derived parameters to be correctly calculated within a multi index context" time="0.034">
      <failure>TypeError: Cannot read property &apos;getSearchParameters&apos; of undefined
    at Object.&lt;anonymous&gt; (/Users/etienne/Projects/clinia-workspace/vizion/react-vizion/packages/react-vizion-core/src/core/__tests__/createVizionManager.test.js:672:9)
    at Object.asyncJestTest (/Users/etienne/Projects/clinia-workspace/vizion/react-vizion/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)
    at /Users/etienne/Projects/clinia-workspace/vizion/react-vizion/node_modules/jest-jasmine2/build/queueRunner.js:43:12
    at new Promise (&lt;anonymous&gt;)
    at mapper (/Users/etienne/Projects/clinia-workspace/vizion/react-vizion/node_modules/jest-jasmine2/build/queueRunner.js:26:19)
    at /Users/etienne/Projects/clinia-workspace/vizion/react-vizion/node_modules/jest-jasmine2/build/queueRunner.js:73:41</failure>
    </testcase>
    <testcase classname="searchStalled should be updated if search is stalled" name="searchStalled should be updated if search is stalled" time="0">
      <skipped/>
    </testcase>
    <testcase classname="client.search should be called when there is a new widget" name="client.search should be called when there is a new widget" time="0">
      <skipped/>
    </testcase>
    <testcase classname="client.search should be called when there is a new client" name="client.search should be called when there is a new client" time="0">
      <skipped/>
    </testcase>
    <testcase classname="client.search should not be called when the search is skipped" name="client.search should not be called when the search is skipped" time="0">
      <skipped/>
    </testcase>
  </testsuite>
</testsuites>